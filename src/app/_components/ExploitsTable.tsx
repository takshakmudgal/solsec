"use client";

import { useState, useEffect } from "react";
import { api } from "~/trpc/react";
import type { Exploit } from "@prisma/client";

export const ExploitsTable = () => {
  const [sortField, setSortField] = useState<keyof Exploit>("hackDate");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc");
  const [filterType, setFilterType] = useState<string>("");
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  const [isPollingActive, setIsPollingActive] = useState(false);

  const {
    data: exploits,
    isLoading,
    error,
    isFetching,
    refetch,
  } = api.exploits.getSolanaExploits.useQuery(undefined, {
    refetchInterval: 5 * 60 * 1000,
    refetchIntervalInBackground: true,
  });

  const { data: stats } = api.exploits.getExploitStats.useQuery(undefined, {
    refetchInterval: 5 * 60 * 1000,
  });

  const forcePollMutation = api.exploits.forcePoll.useMutation({
    onSuccess: () => {
      void refetch();
      setLastUpdated(new Date());
    },
  });

  const startPollingMutation = api.exploits.startPolling.useMutation({
    onSuccess: () => {
      setIsPollingActive(true);
    },
  });

  const stopPollingMutation = api.exploits.stopPolling.useMutation({
    onSuccess: () => {
      setIsPollingActive(false);
    },
  });

  useEffect(() => {
    if (!isLoading && exploits) {
      setLastUpdated(new Date());
    }
  }, [exploits, isLoading]);

  const handleSort = (field: keyof Exploit) => {
    if (field === sortField) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortDirection("desc");
    }
  };

  const filteredExploits = exploits
    ? exploits.filter(
        (exploit) => filterType === "" || exploit.exploitType === filterType,
      )
    : [];

  const sortedExploits = [...(filteredExploits || [])].sort((a, b) => {
    if (sortField === "amountStolen") {
      return sortDirection === "asc"
        ? a.amountStolen - b.amountStolen
        : b.amountStolen - a.amountStolen;
    } else if (sortField === "hackDate") {
      return sortDirection === "asc"
        ? new Date(a.hackDate).getTime() - new Date(b.hackDate).getTime()
        : new Date(b.hackDate).getTime() - new Date(a.hackDate).getTime();
    } else {
      const aValue = a[sortField] as string;
      const bValue = b[sortField] as string;
      return sortDirection === "asc"
        ? (aValue || "").localeCompare(bValue || "")
        : (bValue || "").localeCompare(aValue || "");
    }
  });

  const exploitTypes = exploits
    ? [...new Set(exploits.map((exploit) => exploit.exploitType))]
    : [];

  if (isLoading)
    return <div className="p-8 text-center">Loading exploit data...</div>;
  if (error)
    return (
      <div className="p-8 text-center text-red-500">
        Error loading exploit data: {error.message}
      </div>
    );

  const showFetchingIndicator = isFetching && !isLoading;
  const isForcePollLoading = forcePollMutation.isPending;
  const isServiceLoading =
    startPollingMutation.isPending || stopPollingMutation.isPending;

  return (
    <div className="w-[80vw]">
      <div className="mb-4 flex items-center justify-between">
        <div className="flex flex-col">
          <h2 className="text-2xl font-semibold">Solana Security Exploits</h2>
          {stats && (
            <p className="mt-1 text-sm text-neutral-400">
              Tracking {stats.totalCount} exploits with $
              {stats.totalAmountStolen.toLocaleString()} lost |{" "}
              {stats.recoveryRate.toFixed(1)}% recovered
            </p>
          )}
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <div
              className={`h-3 w-3 rounded-full ${isPollingActive ? "animate-pulse bg-green-500" : "bg-neutral-500"}`}
            ></div>
            <span className="text-sm text-neutral-400">
              {isPollingActive
                ? "Live monitoring active"
                : "Live monitoring inactive"}
            </span>
          </div>

          <div className="flex space-x-2">
            <button
              onClick={() =>
                isPollingActive
                  ? stopPollingMutation.mutate()
                  : startPollingMutation.mutate()
              }
              disabled={isServiceLoading}
              className="rounded bg-blue-800 px-3 py-1 text-sm text-white hover:bg-blue-700 disabled:opacity-50"
            >
              {isServiceLoading
                ? "Loading..."
                : isPollingActive
                  ? "Stop Monitoring"
                  : "Start Monitoring"}
            </button>
            <button
              onClick={() => forcePollMutation.mutate()}
              disabled={isForcePollLoading}
              className="rounded bg-emerald-800 px-3 py-1 text-sm text-white hover:bg-emerald-700 disabled:opacity-50"
            >
              {isForcePollLoading ? "Checking..." : "Check Now"}
            </button>
          </div>

          <div className="text-sm text-neutral-400">
            {showFetchingIndicator ? (
              <span>Updating...</span>
            ) : lastUpdated ? (
              `Last updated: ${lastUpdated.toLocaleTimeString()}`
            ) : (
              <span>&nbsp;</span>
            )}
          </div>

          <div className="flex items-center space-x-2">
            <label htmlFor="filterType" className="text-sm">
              Filter by type:
            </label>
            <select
              id="filterType"
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              className="rounded bg-neutral-800 px-3 py-1 text-sm"
            >
              <option value="">All Types</option>
              {exploitTypes.map((type) => (
                <option key={type} value={type}>
                  {type}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-neutral-700">
          <thead className="bg-neutral-800">
            <tr>
              <th
                className="cursor-pointer px-4 py-3 text-left text-sm font-medium text-neutral-300"
                onClick={() => handleSort("protocol")}
              >
                Protocol{" "}
                {sortField === "protocol" &&
                  (sortDirection === "asc" ? "↑" : "↓")}
              </th>
              <th
                className="cursor-pointer px-4 py-3 text-left text-sm font-medium text-neutral-300"
                onClick={() => handleSort("hackDate")}
              >
                Date{" "}
                {sortField === "hackDate" &&
                  (sortDirection === "asc" ? "↑" : "↓")}
              </th>
              <th
                className="cursor-pointer px-4 py-3 text-left text-sm font-medium text-neutral-300"
                onClick={() => handleSort("amountStolen")}
              >
                Amount Stolen (USD){" "}
                {sortField === "amountStolen" &&
                  (sortDirection === "asc" ? "↑" : "↓")}
              </th>
              <th
                className="cursor-pointer px-4 py-3 text-left text-sm font-medium text-neutral-300"
                onClick={() => handleSort("exploitType")}
              >
                Exploit Type{" "}
                {sortField === "exploitType" &&
                  (sortDirection === "asc" ? "↑" : "↓")}
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-neutral-300">
                Technique
              </th>
              <th
                className="cursor-pointer px-4 py-3 text-left text-sm font-medium text-neutral-300"
                onClick={() => handleSort("recovered")}
              >
                Recovered{" "}
                {sortField === "recovered" &&
                  (sortDirection === "asc" ? "↑" : "↓")}
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-neutral-300">
                Resolution
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-neutral-300">
                Audited By
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-neutral-700 bg-neutral-900">
            {sortedExploits.map((exploit) => (
              <tr key={exploit.id} className="hover:bg-neutral-800">
                <td className="px-4 py-3 text-sm">{exploit.protocol}</td>
                <td className="px-4 py-3 text-sm">
                  {new Date(exploit.hackDate).toLocaleDateString()}
                </td>
                <td className="px-4 py-3 text-right text-sm">
                  {exploit.amountStolen.toLocaleString(undefined, {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  })}
                </td>
                <td className="px-4 py-3 text-sm">{exploit.exploitType}</td>
                <td className="px-4 py-3 text-sm">{exploit.technique}</td>
                <td className="px-4 py-3 text-sm">
                  {exploit.recovered ? "Yes" : "No"}
                </td>
                <td className="px-4 py-3 text-sm">
                  {exploit.resolution ?? "-"}
                </td>
                <td className="px-4 py-3 text-sm">
                  {exploit.auditedBy ?? "-"}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};
